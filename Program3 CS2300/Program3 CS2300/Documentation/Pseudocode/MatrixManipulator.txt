MatrixManipulator: Script to perform various matrix manipulations and calculations

function Print2DMatrix (a 2D matrix)
	iterates through each row printing out the number in each column of the row and prints a white space between the columns

function SolveMatrixEquation (A (2x2 matrix), b (2x1 matrix)) : solve the equation Ax=b for x

	Instantiate matrices for later

	if bottom left of a is not 0
		set the shear using -a11/a21 for bottom left, set rest according to the indentity matrix
		multiply the shear onto A and B using MatrixMultiplier2D

	if bottom right of a is 0
		if b2 is 0
			print out "infinite solutions" to user

		else
			print out "no solutions" to user
	
		exit the function
		
	else if the top right is not 0
		Set the shear using -a12/a22 for the top right, set rest according to the indentity matrix
		multiply the shear onto A and B using the MatrixMultiplier2D

	
	solve for x1 by dividing b1 by a11
	solve for x2 by dividing b2 by a22
	print out solution

function MatrixMultiplier2D (2 2D matrices) : multiplies 2

	Instantiate output
	Support for the loop

	Start at each row of the first matrix and save each column value in a list
	Take each column of the second matrix and save each row value in a list

	loop through and add together the multiples of the same positions in each of the two aformentioned lists and save it to the appropriate place in the output matrix
	reset the column list of the second matrix and go back and save the next column into the list

	when all the columns of the second matrix are saved and mulitplied by the rows of the first matrix reset the row list and go back 2 steps
	when all the rows of the first matrix are used return the new matrix

function SolveEigenThings (A (2x2 matrix)) : Solves for eigenvalues, the eigenvector, R, and computes RÎ›RT

	Declare matrices for later

	Solve for ba nd c of quadratic formula
	find the discrminant of the quadratic formula
	if the discriminant is less than 0 print "no solution to user" and exit function
	
	solve for eigen vectors using the quadratic equation variables from above

	Create lambda, which is the eigen vector matrix * the identity
	Print lambda to the user

	Setup to solve for eigen values

	Solve for the eigen manipulated matrices, using the A-I(lambda) equation
	Pass in the eigen manipulated matrices with the zero vector to solve for the eigen vectors using SolveMatrixEquation

	Create R, which is the eigen vectors put in a 2x2 (evector1 on the left, evector2 on the right)
	Print R for the user
	Transpose R

	Calculate the eigendecomposition by multiplying R to lambda then to R transposed
	Print the eigen decomp to the user

	Test to see if the eigen decomp is the same as the input matrix
	First set a value to see if the eigendecomp is a scaled version of the input matrix
	Go through each of the input matrix's cells and see if the eigendecomp times the factor is that value

	Print out if it is the same or not to user 

function SigDigRounder (A number, number of significant digits) : Rounds the input number to the appropriate amount of significant digits

	Check to make sure the number isn't zero, is so, return the number
	
	Check to see if the number is negative, if so make it positive

	Take the natural log of the number
	Get the number of decimal points to round to
	set the number equal to the the number divided by the numbers